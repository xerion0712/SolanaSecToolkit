name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build release
      run: cargo build --release --verbose

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build scsec
      run: cargo build --release
    
    - name: Run security scan on self
      run: |
        ./target/release/scsec scan ./src --output ./security-results --format json
      continue-on-error: true
    
    - name: Generate security report
      run: |
        ./target/release/scsec report ./security-results --output ./security-report.html --format html
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          ./security-results/
          ./security-report.html
        retention-days: 30
    
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read security results if they exist
            const resultsPath = './security-results';
            if (fs.existsSync(resultsPath)) {
              const files = fs.readdirSync(resultsPath);
              const jsonFiles = files.filter(f => f.endsWith('.json'));
              
              if (jsonFiles.length > 0) {
                const resultsFile = path.join(resultsPath, jsonFiles[0]);
                const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
                
                const criticalCount = results.filter(r => r.severity === 'critical').length;
                const highCount = results.filter(r => r.severity === 'high').length;
                const totalCount = results.length;
                
                let comment = `## üõ°Ô∏è Security Scan Results\n\n`;
                comment += `- **Total Issues:** ${totalCount}\n`;
                comment += `- **Critical:** ${criticalCount}\n`;
                comment += `- **High:** ${highCount}\n\n`;
                
                if (criticalCount > 0) {
                  comment += `‚ö†Ô∏è **Critical security issues found!** Please review before merging.\n\n`;
                }
                
                comment += `[View full report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})\n`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }
          } catch (error) {
            console.log('Could not read security results:', error.message);
          }

  fuzz-test:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true
    
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-fuzz-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-fuzz-
    
    - name: Build scsec
      run: cargo build --release
    
    - name: Run fuzz testing
      run: |
        ./target/release/scsec fuzz ./src --timeout 60 --jobs 2 --output ./fuzz-results
      continue-on-error: true
    
    - name: Upload fuzz results
      uses: actions/upload-artifact@v4
      with:
        name: fuzz-results
        path: ./fuzz-results/
        retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build release binaries
      run: |
        cargo build --release
        strip target/release/scsec
    
    - name: Create release archive
      run: |
        mkdir -p release
        cp target/release/scsec release/
        cp README.md release/
        cp LICENSE release/ || echo "No LICENSE file found"
        tar -czf scsec-linux-x86_64.tar.gz -C release .
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: |
          scsec-linux-x86_64.tar.gz
          target/release/scsec
        retention-days: 90 